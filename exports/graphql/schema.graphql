type About {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  Title: String!
  info: String!
  image: UploadFile
  stack: [ComponentDescriptionStackItem]
  created_by: AdminUser
  updated_by: AdminUser
}

input AboutInput {
  Title: String!
  info: String!
  image: ID
  stack: [ComponentDescriptionStackItemInput!]
  created_by: ID
  updated_by: ID
}

type AdminUser {
  id: ID!
  username: String
}

type Blog {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  title: String!
  image: UploadFile
  content: String!
  slug: String
  category: ENUM_BLOG_CATEGORY!
  description: String!
  date: Date
  created_by: AdminUser
  updated_by: AdminUser
}

type BlogAggregator {
  count: Int
  totalCount: Int
}

type BlogConnection {
  values: [Blog]
  groupBy: BlogGroupBy
  aggregate: BlogAggregator
}

type BlogConnectionCategory {
  key: String
  connection: BlogConnection
}

type BlogConnectionContent {
  key: String
  connection: BlogConnection
}

type BlogConnectionCreated_at {
  key: DateTime
  connection: BlogConnection
}

type BlogConnectionCreated_by {
  key: ID
  connection: BlogConnection
}

type BlogConnectionDate {
  key: ID
  connection: BlogConnection
}

type BlogConnectionDescription {
  key: String
  connection: BlogConnection
}

type BlogConnectionId {
  key: ID
  connection: BlogConnection
}

type BlogConnectionImage {
  key: ID
  connection: BlogConnection
}

type BlogConnectionSlug {
  key: String
  connection: BlogConnection
}

type BlogConnectionTitle {
  key: String
  connection: BlogConnection
}

type BlogConnectionUpdated_at {
  key: DateTime
  connection: BlogConnection
}

type BlogConnectionUpdated_by {
  key: ID
  connection: BlogConnection
}

type BlogGroupBy {
  id: [BlogConnectionId]
  created_at: [BlogConnectionCreated_at]
  updated_at: [BlogConnectionUpdated_at]
  title: [BlogConnectionTitle]
  image: [BlogConnectionImage]
  content: [BlogConnectionContent]
  slug: [BlogConnectionSlug]
  category: [BlogConnectionCategory]
  description: [BlogConnectionDescription]
  date: [BlogConnectionDate]
  created_by: [BlogConnectionCreated_by]
  updated_by: [BlogConnectionUpdated_by]
}

input BlogInput {
  title: String!
  image: ID
  content: String!
  slug: String
  category: ENUM_BLOG_CATEGORY!
  description: String!
  date: Date
  created_by: ID
  updated_by: ID
}

type ComponentDescriptionJobDescription {
  id: ID!
  name: String!
}

input ComponentDescriptionJobDescriptionInput {
  name: String!
}

type ComponentDescriptionStackItem {
  id: ID!
  title: String!
}

input ComponentDescriptionStackItemInput {
  title: String!
}

input createBlogInput {
  data: BlogInput
}

type createBlogPayload {
  blog: Blog
}

input createJobInput {
  data: JobInput
}

type createJobPayload {
  job: Job
}

input createProjectInput {
  data: ProjectInput
}

type createProjectPayload {
  project: Project
}

input createRoleInput {
  data: RoleInput
}

type createRolePayload {
  role: UsersPermissionsRole
}

input createUserInput {
  data: UserInput
}

type createUserPayload {
  user: UsersPermissionsUser
}

"""
A date string, such as 2007-12-03, compliant with the `full-date` format
outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for
representation of dates and times using the Gregorian calendar.
"""
scalar Date

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the
`date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO
8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

type deleteAboutPayload {
  about: About
}

input deleteBlogInput {
  where: InputID
}

type deleteBlogPayload {
  blog: Blog
}

input deleteJobInput {
  where: InputID
}

type deleteJobPayload {
  job: Job
}

input deleteProjectInput {
  where: InputID
}

type deleteProjectPayload {
  project: Project
}

input deleteRoleInput {
  where: InputID
}

type deleteRolePayload {
  role: UsersPermissionsRole
}

input deleteUserInput {
  where: InputID
}

type deleteUserPayload {
  user: UsersPermissionsUser
}

input editAboutInput {
  Title: String
  info: String
  image: ID
  stack: [editComponentDescriptionStackItemInput]
  created_by: ID
  updated_by: ID
}

input editBlogInput {
  title: String
  image: ID
  content: String
  slug: String
  category: ENUM_BLOG_CATEGORY
  description: String
  date: Date
  created_by: ID
  updated_by: ID
}

input editComponentDescriptionJobDescriptionInput {
  id: ID
  name: String
}

input editComponentDescriptionStackItemInput {
  id: ID
  title: String
}

input editFileInput {
  name: String
  alternativeText: String
  caption: String
  width: Int
  height: Int
  formats: JSON
  hash: String
  ext: String
  mime: String
  size: Float
  url: String
  previewUrl: String
  provider: String
  provider_metadata: JSON
  related: [ID]
  created_by: ID
  updated_by: ID
}

input editJobInput {
  company: String
  position: String
  date: String
  description: [editComponentDescriptionJobDescriptionInput]
  created_by: ID
  updated_by: ID
}

input editProjectInput {
  title: String
  description: String
  image: ID
  github: String
  url: String
  featured: Boolean
  stack: [editComponentDescriptionStackItemInput]
  created_by: ID
  updated_by: ID
}

input editRoleInput {
  name: String
  description: String
  type: String
  permissions: [ID]
  users: [ID]
  created_by: ID
  updated_by: ID
}

input editUserInput {
  username: String
  email: String
  provider: String
  password: String
  resetPasswordToken: String
  confirmed: Boolean
  blocked: Boolean
  role: ID
  created_by: ID
  updated_by: ID
}

enum ENUM_BLOG_CATEGORY {
  gatsby
  javascript
  react
  html
}

input FileInput {
  name: String!
  alternativeText: String
  caption: String
  width: Int
  height: Int
  formats: JSON
  hash: String!
  ext: String
  mime: String!
  size: Float!
  url: String!
  previewUrl: String
  provider: String!
  provider_metadata: JSON
  related: [ID]
  created_by: ID
  updated_by: ID
}

input InputID {
  id: ID!
}

type Job {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  company: String!
  position: String!
  date: String!
  description: [ComponentDescriptionJobDescription]
  created_by: AdminUser
  updated_by: AdminUser
}

type JobAggregator {
  count: Int
  totalCount: Int
}

type JobConnection {
  values: [Job]
  groupBy: JobGroupBy
  aggregate: JobAggregator
}

type JobConnectionCompany {
  key: String
  connection: JobConnection
}

type JobConnectionCreated_at {
  key: DateTime
  connection: JobConnection
}

type JobConnectionCreated_by {
  key: ID
  connection: JobConnection
}

type JobConnectionDate {
  key: String
  connection: JobConnection
}

type JobConnectionId {
  key: ID
  connection: JobConnection
}

type JobConnectionPosition {
  key: String
  connection: JobConnection
}

type JobConnectionUpdated_at {
  key: DateTime
  connection: JobConnection
}

type JobConnectionUpdated_by {
  key: ID
  connection: JobConnection
}

type JobGroupBy {
  id: [JobConnectionId]
  created_at: [JobConnectionCreated_at]
  updated_at: [JobConnectionUpdated_at]
  company: [JobConnectionCompany]
  position: [JobConnectionPosition]
  date: [JobConnectionDate]
  created_by: [JobConnectionCreated_by]
  updated_by: [JobConnectionUpdated_by]
}

input JobInput {
  company: String!
  position: String!
  date: String!
  description: [ComponentDescriptionJobDescriptionInput!]
  created_by: ID
  updated_by: ID
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

"""The `Long` scalar type represents 52-bit integers"""
scalar Long

union Morph = UsersPermissionsMe | UsersPermissionsMeRole | UsersPermissionsLoginPayload | UserPermissionsPasswordPayload | About | updateAboutPayload | deleteAboutPayload | Blog | BlogConnection | BlogAggregator | BlogGroupBy | BlogConnectionId | BlogConnectionCreated_at | BlogConnectionUpdated_at | BlogConnectionTitle | BlogConnectionImage | BlogConnectionContent | BlogConnectionSlug | BlogConnectionCategory | BlogConnectionDescription | BlogConnectionDate | BlogConnectionCreated_by | BlogConnectionUpdated_by | createBlogPayload | updateBlogPayload | deleteBlogPayload | Job | JobConnection | JobAggregator | JobGroupBy | JobConnectionId | JobConnectionCreated_at | JobConnectionUpdated_at | JobConnectionCompany | JobConnectionPosition | JobConnectionDate | JobConnectionCreated_by | JobConnectionUpdated_by | createJobPayload | updateJobPayload | deleteJobPayload | Project | ProjectConnection | ProjectAggregator | ProjectGroupBy | ProjectConnectionId | ProjectConnectionCreated_at | ProjectConnectionUpdated_at | ProjectConnectionTitle | ProjectConnectionDescription | ProjectConnectionImage | ProjectConnectionGithub | ProjectConnectionUrl | ProjectConnectionFeatured | ProjectConnectionCreated_by | ProjectConnectionUpdated_by | createProjectPayload | updateProjectPayload | deleteProjectPayload | UploadFile | UploadFileConnection | UploadFileAggregator | UploadFileAggregatorSum | UploadFileAggregatorAvg | UploadFileAggregatorMin | UploadFileAggregatorMax | UploadFileGroupBy | UploadFileConnectionId | UploadFileConnectionCreated_at | UploadFileConnectionUpdated_at | UploadFileConnectionName | UploadFileConnectionAlternativeText | UploadFileConnectionCaption | UploadFileConnectionWidth | UploadFileConnectionHeight | UploadFileConnectionFormats | UploadFileConnectionHash | UploadFileConnectionExt | UploadFileConnectionMime | UploadFileConnectionSize | UploadFileConnectionUrl | UploadFileConnectionPreviewUrl | UploadFileConnectionProvider | UploadFileConnectionProvider_metadata | UploadFileConnectionCreated_by | UploadFileConnectionUpdated_by | UsersPermissionsPermission | UsersPermissionsRole | UsersPermissionsRoleConnection | UsersPermissionsRoleAggregator | UsersPermissionsRoleGroupBy | UsersPermissionsRoleConnectionId | UsersPermissionsRoleConnectionName | UsersPermissionsRoleConnectionDescription | UsersPermissionsRoleConnectionType | UsersPermissionsRoleConnectionCreated_by | UsersPermissionsRoleConnectionUpdated_by | createRolePayload | updateRolePayload | deleteRolePayload | UsersPermissionsUser | UsersPermissionsUserConnection | UsersPermissionsUserAggregator | UsersPermissionsUserGroupBy | UsersPermissionsUserConnectionId | UsersPermissionsUserConnectionCreated_at | UsersPermissionsUserConnectionUpdated_at | UsersPermissionsUserConnectionUsername | UsersPermissionsUserConnectionEmail | UsersPermissionsUserConnectionProvider | UsersPermissionsUserConnectionConfirmed | UsersPermissionsUserConnectionBlocked | UsersPermissionsUserConnectionRole | UsersPermissionsUserConnectionCreated_by | UsersPermissionsUserConnectionUpdated_by | createUserPayload | updateUserPayload | deleteUserPayload | ComponentDescriptionJobDescription | ComponentDescriptionStackItem

type Mutation {
  updateAbout(input: updateAboutInput): updateAboutPayload
  deleteAbout: deleteAboutPayload
  createBlog(input: createBlogInput): createBlogPayload
  updateBlog(input: updateBlogInput): updateBlogPayload
  deleteBlog(input: deleteBlogInput): deleteBlogPayload
  createJob(input: createJobInput): createJobPayload
  updateJob(input: updateJobInput): updateJobPayload
  deleteJob(input: deleteJobInput): deleteJobPayload
  createProject(input: createProjectInput): createProjectPayload
  updateProject(input: updateProjectInput): updateProjectPayload
  deleteProject(input: deleteProjectInput): deleteProjectPayload

  """Create a new role"""
  createRole(input: createRoleInput): createRolePayload

  """Update an existing role"""
  updateRole(input: updateRoleInput): updateRolePayload

  """Delete an existing role"""
  deleteRole(input: deleteRoleInput): deleteRolePayload

  """Create a new user"""
  createUser(input: createUserInput): createUserPayload

  """Update an existing user"""
  updateUser(input: updateUserInput): updateUserPayload

  """Delete an existing user"""
  deleteUser(input: deleteUserInput): deleteUserPayload
  upload(refId: ID, ref: String, field: String, source: String, file: Upload!): UploadFile!
  multipleUpload(refId: ID, ref: String, field: String, source: String, files: [Upload]!): [UploadFile]!
  login(input: UsersPermissionsLoginInput!): UsersPermissionsLoginPayload!
  register(input: UsersPermissionsRegisterInput!): UsersPermissionsLoginPayload!
  forgotPassword(email: String!): UserPermissionsPasswordPayload
  resetPassword(password: String!, passwordConfirmation: String!, code: String!): UsersPermissionsLoginPayload
  emailConfirmation(confirmation: String!): UsersPermissionsLoginPayload
}

type Project {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  title: String!
  description: String!
  image: UploadFile
  github: String
  url: String
  featured: Boolean!
  stack: [ComponentDescriptionStackItem]
  created_by: AdminUser
  updated_by: AdminUser
}

type ProjectAggregator {
  count: Int
  totalCount: Int
}

type ProjectConnection {
  values: [Project]
  groupBy: ProjectGroupBy
  aggregate: ProjectAggregator
}

type ProjectConnectionCreated_at {
  key: DateTime
  connection: ProjectConnection
}

type ProjectConnectionCreated_by {
  key: ID
  connection: ProjectConnection
}

type ProjectConnectionDescription {
  key: String
  connection: ProjectConnection
}

type ProjectConnectionFeatured {
  key: Boolean
  connection: ProjectConnection
}

type ProjectConnectionGithub {
  key: String
  connection: ProjectConnection
}

type ProjectConnectionId {
  key: ID
  connection: ProjectConnection
}

type ProjectConnectionImage {
  key: ID
  connection: ProjectConnection
}

type ProjectConnectionTitle {
  key: String
  connection: ProjectConnection
}

type ProjectConnectionUpdated_at {
  key: DateTime
  connection: ProjectConnection
}

type ProjectConnectionUpdated_by {
  key: ID
  connection: ProjectConnection
}

type ProjectConnectionUrl {
  key: String
  connection: ProjectConnection
}

type ProjectGroupBy {
  id: [ProjectConnectionId]
  created_at: [ProjectConnectionCreated_at]
  updated_at: [ProjectConnectionUpdated_at]
  title: [ProjectConnectionTitle]
  description: [ProjectConnectionDescription]
  image: [ProjectConnectionImage]
  github: [ProjectConnectionGithub]
  url: [ProjectConnectionUrl]
  featured: [ProjectConnectionFeatured]
  created_by: [ProjectConnectionCreated_by]
  updated_by: [ProjectConnectionUpdated_by]
}

input ProjectInput {
  title: String!
  description: String!
  image: ID
  github: String
  url: String
  featured: Boolean
  stack: [ComponentDescriptionStackItemInput!]
  created_by: ID
  updated_by: ID
}

type Query {
  about: About
  blog(id: ID!): Blog
  blogs(sort: String, limit: Int, start: Int, where: JSON): [Blog]
  blogsConnection(sort: String, limit: Int, start: Int, where: JSON): BlogConnection
  job(id: ID!): Job
  jobs(sort: String, limit: Int, start: Int, where: JSON): [Job]
  jobsConnection(sort: String, limit: Int, start: Int, where: JSON): JobConnection
  project(id: ID!): Project
  projects(sort: String, limit: Int, start: Int, where: JSON): [Project]
  projectsConnection(sort: String, limit: Int, start: Int, where: JSON): ProjectConnection
  files(sort: String, limit: Int, start: Int, where: JSON): [UploadFile]
  filesConnection(sort: String, limit: Int, start: Int, where: JSON): UploadFileConnection
  role(id: ID!): UsersPermissionsRole

  """
  Retrieve all the existing roles. You can't apply filters on this query.
  """
  roles(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsRole]
  rolesConnection(sort: String, limit: Int, start: Int, where: JSON): UsersPermissionsRoleConnection
  user(id: ID!): UsersPermissionsUser
  users(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsUser]
  usersConnection(sort: String, limit: Int, start: Int, where: JSON): UsersPermissionsUserConnection
  me: UsersPermissionsMe
}

input RoleInput {
  name: String!
  description: String
  type: String
  permissions: [ID]
  users: [ID]
  created_by: ID
  updated_by: ID
}

"""A time string with format: HH:mm:ss.SSS"""
scalar Time

input updateAboutInput {
  data: editAboutInput
}

type updateAboutPayload {
  about: About
}

input updateBlogInput {
  where: InputID
  data: editBlogInput
}

type updateBlogPayload {
  blog: Blog
}

input updateJobInput {
  where: InputID
  data: editJobInput
}

type updateJobPayload {
  job: Job
}

input updateProjectInput {
  where: InputID
  data: editProjectInput
}

type updateProjectPayload {
  project: Project
}

input updateRoleInput {
  where: InputID
  data: editRoleInput
}

type updateRolePayload {
  role: UsersPermissionsRole
}

input updateUserInput {
  where: InputID
  data: editUserInput
}

type updateUserPayload {
  user: UsersPermissionsUser
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type UploadFile {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  name: String!
  alternativeText: String
  caption: String
  width: Int
  height: Int
  formats: JSON
  hash: String!
  ext: String
  mime: String!
  size: Float!
  url: String!
  previewUrl: String
  provider: String!
  provider_metadata: JSON
  created_by: AdminUser
  updated_by: AdminUser
  related(sort: String, limit: Int, start: Int, where: JSON): [Morph]
}

type UploadFileAggregator {
  count: Int
  totalCount: Int
  sum: UploadFileAggregatorSum
  avg: UploadFileAggregatorAvg
  min: UploadFileAggregatorMin
  max: UploadFileAggregatorMax
}

type UploadFileAggregatorAvg {
  width: Float
  height: Float
  size: Float
}

type UploadFileAggregatorMax {
  width: Float
  height: Float
  size: Float
}

type UploadFileAggregatorMin {
  width: Float
  height: Float
  size: Float
}

type UploadFileAggregatorSum {
  width: Float
  height: Float
  size: Float
}

type UploadFileConnection {
  values: [UploadFile]
  groupBy: UploadFileGroupBy
  aggregate: UploadFileAggregator
}

type UploadFileConnectionAlternativeText {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionCaption {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionCreated_at {
  key: DateTime
  connection: UploadFileConnection
}

type UploadFileConnectionCreated_by {
  key: ID
  connection: UploadFileConnection
}

type UploadFileConnectionExt {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionFormats {
  key: JSON
  connection: UploadFileConnection
}

type UploadFileConnectionHash {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionHeight {
  key: Int
  connection: UploadFileConnection
}

type UploadFileConnectionId {
  key: ID
  connection: UploadFileConnection
}

type UploadFileConnectionMime {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionName {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionPreviewUrl {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionProvider {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionProvider_metadata {
  key: JSON
  connection: UploadFileConnection
}

type UploadFileConnectionSize {
  key: Float
  connection: UploadFileConnection
}

type UploadFileConnectionUpdated_at {
  key: DateTime
  connection: UploadFileConnection
}

type UploadFileConnectionUpdated_by {
  key: ID
  connection: UploadFileConnection
}

type UploadFileConnectionUrl {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionWidth {
  key: Int
  connection: UploadFileConnection
}

type UploadFileGroupBy {
  id: [UploadFileConnectionId]
  created_at: [UploadFileConnectionCreated_at]
  updated_at: [UploadFileConnectionUpdated_at]
  name: [UploadFileConnectionName]
  alternativeText: [UploadFileConnectionAlternativeText]
  caption: [UploadFileConnectionCaption]
  width: [UploadFileConnectionWidth]
  height: [UploadFileConnectionHeight]
  formats: [UploadFileConnectionFormats]
  hash: [UploadFileConnectionHash]
  ext: [UploadFileConnectionExt]
  mime: [UploadFileConnectionMime]
  size: [UploadFileConnectionSize]
  url: [UploadFileConnectionUrl]
  previewUrl: [UploadFileConnectionPreviewUrl]
  provider: [UploadFileConnectionProvider]
  provider_metadata: [UploadFileConnectionProvider_metadata]
  created_by: [UploadFileConnectionCreated_by]
  updated_by: [UploadFileConnectionUpdated_by]
}

input UserInput {
  username: String!
  email: String!
  provider: String
  password: String
  resetPasswordToken: String
  confirmed: Boolean
  blocked: Boolean
  role: ID
  created_by: ID
  updated_by: ID
}

type UserPermissionsPasswordPayload {
  ok: Boolean!
}

input UsersPermissionsLoginInput {
  identifier: String!
  password: String!
  provider: String = "local"
}

type UsersPermissionsLoginPayload {
  jwt: String
  user: UsersPermissionsMe!
}

type UsersPermissionsMe {
  id: ID!
  username: String!
  email: String!
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsMeRole
}

type UsersPermissionsMeRole {
  id: ID!
  name: String!
  description: String
  type: String
}

type UsersPermissionsPermission {
  id: ID!
  type: String!
  controller: String!
  action: String!
  enabled: Boolean!
  policy: String
  role: UsersPermissionsRole
  created_by: AdminUser
  updated_by: AdminUser
}

input UsersPermissionsRegisterInput {
  username: String!
  email: String!
  password: String!
}

type UsersPermissionsRole {
  id: ID!
  name: String!
  description: String
  type: String
  created_by: AdminUser
  updated_by: AdminUser
  permissions(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsPermission]
  users(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsUser]
}

type UsersPermissionsRoleAggregator {
  count: Int
  totalCount: Int
}

type UsersPermissionsRoleConnection {
  values: [UsersPermissionsRole]
  groupBy: UsersPermissionsRoleGroupBy
  aggregate: UsersPermissionsRoleAggregator
}

type UsersPermissionsRoleConnectionCreated_by {
  key: ID
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionDescription {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionId {
  key: ID
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionName {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionType {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionUpdated_by {
  key: ID
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleGroupBy {
  id: [UsersPermissionsRoleConnectionId]
  name: [UsersPermissionsRoleConnectionName]
  description: [UsersPermissionsRoleConnectionDescription]
  type: [UsersPermissionsRoleConnectionType]
  created_by: [UsersPermissionsRoleConnectionCreated_by]
  updated_by: [UsersPermissionsRoleConnectionUpdated_by]
}

type UsersPermissionsUser {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  username: String!
  email: String!
  provider: String
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsRole
  created_by: AdminUser
  updated_by: AdminUser
}

type UsersPermissionsUserAggregator {
  count: Int
  totalCount: Int
}

type UsersPermissionsUserConnection {
  values: [UsersPermissionsUser]
  groupBy: UsersPermissionsUserGroupBy
  aggregate: UsersPermissionsUserAggregator
}

type UsersPermissionsUserConnectionBlocked {
  key: Boolean
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionConfirmed {
  key: Boolean
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionCreated_at {
  key: DateTime
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionCreated_by {
  key: ID
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionEmail {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionId {
  key: ID
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionProvider {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionRole {
  key: ID
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionUpdated_at {
  key: DateTime
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionUpdated_by {
  key: ID
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionUsername {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserGroupBy {
  id: [UsersPermissionsUserConnectionId]
  created_at: [UsersPermissionsUserConnectionCreated_at]
  updated_at: [UsersPermissionsUserConnectionUpdated_at]
  username: [UsersPermissionsUserConnectionUsername]
  email: [UsersPermissionsUserConnectionEmail]
  provider: [UsersPermissionsUserConnectionProvider]
  confirmed: [UsersPermissionsUserConnectionConfirmed]
  blocked: [UsersPermissionsUserConnectionBlocked]
  role: [UsersPermissionsUserConnectionRole]
  created_by: [UsersPermissionsUserConnectionCreated_by]
  updated_by: [UsersPermissionsUserConnectionUpdated_by]
}
